# General info
SHELL       = @SHELL@
prefix      = @prefix@
exec_prefix = @exec_prefix@
bindir      = @bindir@
libdir      = @libdir@
datadir     = @datadir@
datarootdir = @datarootdir@
srcdir      = @srcdir@
VPATH       = $(srcdir)

# These may be overridden by make invocators
DESTDIR        =
GOSH           = "@GOSH@"
GAUCHE_CONFIG  = "@GAUCHE_CONFIG@"
GAUCHE_PACKAGE = "@GAUCHE_PACKAGE@"
INSTALL        = "@GAUCHE_INSTALL@" -C

CFLAGS     = @CFLAGS@
CPPFLAGS   = @CPPFLAGS@ @WINDOWS_UNICODE_FLAG@
LDFLAGS    = @LDFLAGS@
LIBS       = @LIBS@

# Other parameters
SOEXT  = @SOEXT@
OBJEXT = @OBJEXT@
EXEEXT = @EXEEXT@
LOCAL_PATHS = "@LOCAL_PATHS@"

# Module-specific stuff
PACKAGE   = gauche-json-c

ARCHFILES = gauche_json.$(SOEXT)
SCMFILES  = $(srcdir)/json-c.scm
HEADERS   =

TARGET    = $(ARCHFILES)
CLEANFILES =
CONFIG_GENERATED = Makefile config.cache config.log config.status \
		   configure.lineno autom4te*.cache $(PACKAGE).gpd

GAUCHE_PKGINCDIR  = "$(DESTDIR)@GAUCHE_PKGINCDIR@"
GAUCHE_PKGLIBDIR  = "$(DESTDIR)@GAUCHE_PKGLIBDIR@"
GAUCHE_PKGARCHDIR = "$(DESTDIR)@GAUCHE_PKGARCHDIR@"

gauche_json_SRCS = $(srcdir)/gauche_json.c $(srcdir)/gauche_jsonlib.stub
gauche_json_HDRS = $(srcdir)/gauche_json.h

all : $(TARGET)

gauche_json.$(SOEXT): $(gauche_json_SRCS) $(gauche_json_HDRS)
	$(GAUCHE_PACKAGE) compile \
	  --cppflags="$(CPPFLAGS)" --cflags="$(CFLAGS)" \
	  --ldflags="$(LDFLAGS)" --libs="$(LIBS)" \
	  --local=$(LOCAL_PATHS) --verbose gauche_json $(gauche_json_SRCS)

check : all
	@rm -f test.log
	$(GOSH) -I. -I$(srcdir) $(srcdir)/test.scm > test.log

install : all
	$(INSTALL) -m 444 -T $(GAUCHE_PKGINCDIR) $(HEADERS)
	$(INSTALL) -m 444 -T $(GAUCHE_PKGLIBDIR) $(SCMFILES)
	$(INSTALL) -m 555 -T $(GAUCHE_PKGARCHDIR) $(ARCHFILES)
	$(INSTALL) -m 444 -T $(GAUCHE_PKGLIBDIR)/.packages $(PACKAGE).gpd

uninstall :
	$(INSTALL) -U $(GAUCHE_PKGINCDIR) $(HEADERS)
	$(INSTALL) -U $(GAUCHE_PKGLIBDIR) $(SCMFILES)
	$(INSTALL) -U $(GAUCHE_PKGARCHDIR) $(ARCHFILES)
	$(INSTALL) -U $(GAUCHE_PKGLIBDIR)/.packages $(PACKAGE).gpd

clean :
	$(GAUCHE_PACKAGE) compile --clean gauche_json $(gauche_json_SRCS)
	rm -rf core $(TARGET) $(CLEANFILES) *~ test.log so_locations

distclean : clean
	rm -rf $(CONFIG_GENERATED)

maintainer-clean : clean
	rm -rf $(CONFIG_GENERATED)  VERSION
